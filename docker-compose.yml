version: '3.9'
services:
  backend:
    image: node:16-alpine
    command: npm run start:dev
    restart: on-failure
    working_dir: /app/backend
    volumes:
      - .:/app/backend
    ports:
      - 3000:${PORT}
      - 50051:50051
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    environment:
      - PORT=${PORT}
      - GRPC_URL=backend:50051
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - MONGO_URI=mongodb://mongo:27017/${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    healthcheck:
      test: ['CMD', 'lsof', '-t', '-i:3001'] # Caso utilize outra porta interna para o back, altere ela aqui tamb√©m
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:14.3-alpine
    restart: always
    ports:
      - ${DB_PORT}:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-d', 'db_prod']
      interval: 30s
      timeout: 60s
      retries: 10
      start_period: 30s
    cap_add:
      - SYS_NICE # Deve omitir alertas menores

  mongo:
    image: mongo:5.0.7
    restart: always
    ports:
      - ${MONGO_PORT}:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    cap_add:
      - SYS_NICE # Deve omitir alertas menores

  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - 6379:6379
  #   restart: 'always'
  #   healthcheck:
  #     test: ['CMD', 'redis-cli', 'ping']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10
  #     start_period: 30s
  #   cap_add:
  #     - SYS_NICE # Deve omitir alertas menores
